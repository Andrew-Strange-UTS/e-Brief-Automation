name: Mailman Listserv Workflow (Non-Production)

on:
  workflow_dispatch:

env:
  SN_URL: https://utsdevesm.service-now.com

jobs:
  collect-tasks:
    name: Collect All Mailman Listserv Tasks and Requested For Emails
    runs-on: ubuntu-latest
    outputs:
      task_matrix: ${{ steps.collect.outputs.task_matrix }}
    steps:
      - name: Install jq and python3
        run: sudo apt-get update && sudo apt-get install -y jq python3

      - name: Collect all 6 task lists and requested_for emails
        id: collect
        env:
          SN_USERNAME: ${{ secrets.SERVICECONNECT_USERNAME }}
          SN_PASSWORD: ${{ secrets.SERVICECONNECT_PASSWORD }}
          SN_URL: ${{ env.SN_URL }}
        run: |
          DESCS=(
            "Add user to CASS ebrief."
            "Remove user to CASS ebrief."
            "Add user to Academic ebrief"
            "Remove user Academic ebrief"
            "Add user to non-Academic ebrief"
            "Remove user from non-Academic ebrief"
          )
          LIST_NAMES=(
            "cass-add"
            "cass-remove"
            "academic-add"
            "academic-remove"
            "nonacademic-add"
            "nonacademic-remove"
          )

          MATRIX="[]"

          for IDX in "${!DESCS[@]}"; do
            DESC="${DESCS[$IDX]}"
            LIST_NAME="${LIST_NAMES[$IDX]}"
            QUERY="active=true^state=1^short_description=$DESC"
            ENCODED_QUERY=$(python3 -c "import urllib.parse; print(urllib.parse.quote('${QUERY}'))")
            TASKS_URL="$SN_URL/api/now/table/sc_task?sysparm_query=${ENCODED_QUERY}&sysparm_fields=number,request_item"
            RESPONSE=$(curl -s -u "$SN_USERNAME:$SN_PASSWORD" -H "Accept: application/json" "$TASKS_URL")

            TASK_NUMBERS=$(echo "$RESPONSE" | jq -r '[.result[].number]')
            REQUEST_ITEMS=$(echo "$RESPONSE" | jq -r '[.result[].request_item.value]')

            LEN=$(echo "$TASK_NUMBERS" | jq 'length')
            for ((i=0;i<$LEN;i++)); do
              TASK_NUM=$(echo "$TASK_NUMBERS" | jq -r ".[$i]")
              RITM_SYSID=$(echo "$REQUEST_ITEMS" | jq -r ".[$i]")

              if [[ "$RITM_SYSID" != "null" && "$RITM_SYSID" != "" ]]; then
                REQUESTED_FOR_SYSID=$(curl -s -u "$SN_USERNAME:$SN_PASSWORD" -H "Accept: application/json" \
                  "$SN_URL/api/now/table/sc_req_item?sysparm_query=sys_id=${RITM_SYSID}&sysparm_fields=requested_for" | jq -r '.result[0].requested_for.value')
                EMAIL=$(curl -s -u "$SN_USERNAME:$SN_PASSWORD" -H "Accept: application/json" \
                  "$SN_URL/api/now/table/sys_user?sysparm_query=sys_id=${REQUESTED_FOR_SYSID}&sysparm_fields=email" | jq -r '.result[0].email // ""')
              else
                EMAIL=""
              fi

              # Add to matrix
              MATRIX=$(echo "$MATRIX" | jq \
                --arg task_num "$TASK_NUM" \
                --arg email "$EMAIL" \
                --arg list_name "$LIST_NAME" \
                '. + [{"task_num": $task_num, "email": $email, "list_name": $list_name}]')
            done
          done

          echo "$MATRIX" > matrix.json
          echo "task_matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT

      - name: Show collected matrix
        run: cat matrix.json

      - name: Check if matrix is empty
        run: |
          if [ "$(jq 'length' matrix.json)" -eq "0" ]; then
            echo "No tasks found. Exiting."
            exit 78
          fi

  mailman-action:
    name: Add or Remove User from Listserv
    needs: collect-tasks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.collect-tasks.outputs.task_matrix) }}
    outputs:
      result: ${{ steps.mailman.outputs.result }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
      - name: Install Selenium and Chrome
        run: |
          pip install selenium pyyaml
          sudo apt-get update
          sudo apt-get install -y chromium-driver chromium-browser
      - name: Add or Remove User from Listserv
        id: mailman
        env:
          # Add more secrets as needed for each real list
          LISTSERV_PASSWORD: ${{ secrets.TESTPASSWORD }}
        run: |
          # Map list_name to URL and password_secret if you want
          # For this demo, we use dummy URLs -- you should replace or expand as needed
          declare -A URLS=(
            ["cass-add"]="https://example.com/cass/add"
            ["cass-remove"]="https://example.com/cass/remove"
            ["academic-add"]="https://example.com/academic/add"
            ["academic-remove"]="https://example.com/academic/remove"
            ["nonacademic-add"]="https://example.com/nonacademic/add"
            ["nonacademic-remove"]="https://example.com/nonacademic/remove"
          )
          declare -A MODES=(
            ["cass-add"]="add"
            ["cass-remove"]="remove"
            ["academic-add"]="add"
            ["academic-remove"]="remove"
            ["nonacademic-add"]="add"
            ["nonacademic-remove"]="remove"
          )

          LIST_NAME="${{ matrix.list_name }}"
          URL="${URLS[$LIST_NAME]}"
          MODE="${MODES[$LIST_NAME]}"
          EMAIL="${{ matrix.email }}"

          # Only run if URL and email is present
          if [[ -n "$URL" && -n "$EMAIL" && "$EMAIL" != "null" ]]; then
            python3 scripts/listserv_mailman.py \
              --action "$MODE" \
              --url "$URL" \
              --password "$LISTSERV_PASSWORD" \
              --email "$EMAIL" \
              > result.txt
            cat result.txt
            echo "result=$(cat result.txt)" >> $GITHUB_OUTPUT
          else
            echo "Skipping (no URL or email for $LIST_NAME / $EMAIL)"
            echo "result=skipped" >> $GITHUB_OUTPUT
          fi

  update-task:
    name: Update and Close ServiceNow Task
    needs: [collect-tasks, mailman-action]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.collect-tasks.outputs.task_matrix) }}
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Update ServiceNow Task
        env:
          SN_USERNAME: ${{ secrets.SERVICECONNECT_USERNAME }}
          SN_PASSWORD: ${{ secrets.SERVICECONNECT_PASSWORD }}
          SN_URL: ${{ env.SN_URL }}
        run: |
          TASK_NUM="${{ matrix.task_num }}"
          EMAIL="${{ matrix.email }}"
          LIST_NAME="${{ matrix.list_name }}"
          MODE="add"
          [[ "$LIST_NAME" == *remove ]] && MODE="remove"
          RESPONSE=$(cat result.txt 2>/dev/null || echo "")
          if [[ "$MODE" == "add" ]]; then
            WORK_NOTES="$RESPONSE"
          else
            WORK_NOTES="$EMAIL - removed for ebrief"
          fi
          TASK_SYSID=$(curl -s -u "$SN_USERNAME:$SN_PASSWORD" \
            -H "Accept: application/json" \
            "$SN_URL/api/now/table/sc_task?sysparm_query=number=${TASK_NUM}&sysparm_fields=sys_id" | jq -r '.result[0].sys_id')
          CI_SYSID=$(curl -s -u "$SN_USERNAME:$SN_PASSWORD" \
            -H "Accept: application/json" \
            "$SN_URL/api/now/table/cmdb_ci?sysparm_query=name=Listserv&sysparm_fields=sys_id" | jq -r '.result[0].sys_id')
          if [[ -n "$TASK_SYSID" && "$TASK_SYSID" != "null" && -n "$CI_SYSID" && "$CI_SYSID" != "null" ]]; then
            curl -s -u "$SN_USERNAME:$SN_PASSWORD" \
              -X PATCH \
              -H "Content-Type: application/json" \
              -d '{
                    "state": "3",
                    "cmdb_ci": "'"${CI_SYSID}"'",
                    "work_notes": "'"${WORK_NOTES}"'"
                  }' \
              "$SN_URL/api/now/table/sc_task/${TASK_SYSID}"
            echo "✅ Task updated and CI assigned"
          else
            echo "❌ Could not resolve sys_id for task (${TASK_SYSID}) or CI (${CI_SYSID})"
            exit 1
          fi
