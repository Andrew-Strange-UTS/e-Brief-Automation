name: Non-Prod mailman automation
on:
  workflow_dispatch:

jobs:
  mailman-automation:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install requirements (jq, Python, Selenium, Chrome)
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip jq chromium-browser
          python3 -m pip install --upgrade pip
          pip3 install selenium webdriver-manager

      # Step 1: Fetch relevant ServiceNow tasks into 6 groups, print all arrays
      - name: Fetch ServiceNow tasks grouped by type
        id: fetch-tasks
        env:
          SN_USER: ${{ secrets.SERVICECONNECT_USERNAME }}
          SN_PASS: ${{ secrets.SERVICECONNECT_PASSWORD }}
        run: |
          DESCS=(
            "Add user to CASS ebrief."
            "Remove user to CASS ebrief."
            "Add user to Academic ebrief"
            "Remove user Academic ebrief"
            "Add user to non-Academic ebrief"
            "Remove user from non-Academic ebrief"
          )
          ARRAY_NAMES=(CASS_ADD CASS_REMOVE ACAD_ADD ACAD_REMOVE NACAD_ADD NACAD_REMOVE)
          for i in {0..5}; do
            DESC="${DESCS[$i]}"
            NAME="${ARRAY_NAMES[$i]}"
            # Build and encode query
            QUERY="active=true^state=1^short_description=$DESC"
            ENCODED_QUERY=$(python3 -c "import urllib.parse; print(urllib.parse.quote('${QUERY}'))")
            URL="https://utsdevesm.service-now.com/api/now/table/sc_task?sysparm_query=${ENCODED_QUERY}&sysparm_fields=number"
            RESP=$(curl -s -u "$SN_USER:$SN_PASS" -H "Accept: application/json" "$URL")
            ARR=$(echo "$RESP" | jq -c '[.result[].number]')
            echo "Fetched $NAME numbers: $ARR"
            echo "$NAME=$ARR" >> $GITHUB_ENV
          done

      # Step 2: For each group, fetch email addresses and print arrays as [task, email]
      - name: Fetch emails for all tasks for each group
        id: fetch-emails
        env:
          SN_USER: ${{ secrets.SERVICECONNECT_USERNAME }}
          SN_PASS: ${{ secrets.SERVICECONNECT_PASSWORD }}
          CASS_ADD: ${{ env.CASS_ADD }}
          CASS_REMOVE: ${{ env.CASS_REMOVE }}
          ACAD_ADD: ${{ env.ACAD_ADD }}
          ACAD_REMOVE: ${{ env.ACAD_REMOVE }}
          NACAD_ADD: ${{ env.NACAD_ADD }}
          NACAD_REMOVE: ${{ env.NACAD_REMOVE }}
        run: |
          fetch_emails() {
            local arr_name="$1"
            local nums_json="$2"
            nums=$(echo "$nums_json" | jq -r '.[]')
            declare -a output_arr=()
            for num in $nums; do
              RITM_SYSID=$(curl -s -u "$SN_USER:$SN_PASS" \
                -H "Accept: application/json" \
                "https://utsdevesm.service-now.com/api/now/table/sc_task?sysparm_query=number=${num}&sysparm_fields=request_item" \
                | jq -r '.result[0].request_item.value // empty')
              [ -z "$RITM_SYSID" ] && output_arr+=( "[\"$num\",\"error-No request_item\"]" ) && continue
              REQ_FOR_SYSID=$(curl -s -u "$SN_USER:$SN_PASS" \
                -H "Accept: application/json" \
                "https://utsdevesm.service-now.com/api/now/table/sc_req_item?sysparm_query=sys_id=${RITM_SYSID}&sysparm_fields=requested_for" \
                | jq -r '.result[0].requested_for.value // empty')
              [ -z "$REQ_FOR_SYSID" ] && output_arr+=( "[\"$num\",\"error-No requested_for\"]" ) && continue
              EMAIL=$(curl -s -u "$SN_USER:$SN_PASS" \
                -H "Accept: application/json" \
                "https://utsdevesm.service-now.com/api/now/table/sys_user?sysparm_query=sys_id=${REQ_FOR_SYSID}&sysparm_fields=email" \
                | jq -r '.result[0].email // empty')
              [ -z "$EMAIL" ] && output_arr+=( "[\"$num\",\"error-Email not found\"]" ) && continue
              output_arr+=( "[\"$num\",\"$EMAIL\"]" )
            done
            if (( ${#output_arr[@]} )); then
              printf -v finalarr '[%s]' "$(IFS=,; echo "${output_arr[*]}")"
            else
              finalarr='[]'
            fi
            echo "Email pairs for $arr_name: $finalarr"
            # Export for later job steps
            echo "${arr_name}_EMAILS=$finalarr" >> $GITHUB_ENV
          }
          fetch_emails "CASS_ADD" "$CASS_ADD"
          fetch_emails "CASS_REMOVE" "$CASS_REMOVE"
          fetch_emails "ACAD_ADD" "$ACAD_ADD"
          fetch_emails "ACAD_REMOVE" "$ACAD_REMOVE"
          fetch_emails "NACAD_ADD" "$NACAD_ADD"
          fetch_emails "NACAD_REMOVE" "$NACAD_REMOVE"

      # --- Step 3 --- Selenium for non-academic test list only, call external scripts
      - name: Add non-academic emails (Selenium)
        id: add-nonacad
        env:
          TESTPASSWORD: ${{ secrets.TESTPASSWORD }}
          NACAD_ADD_EMAILS: ${{ env.NACAD_ADD_EMAILS }}
        run: |
          echo "$NACAD_ADD_EMAILS" > add_targets.json
          python3 scripts/add_member_from_listserv.py add_targets.json "https://b7943cf2de68.ngrok-free.app/mailman/admin/testlist/members/add" "$TESTPASSWORD" add_results.json
          cat add_results.json

      - name: Remove non-academic emails (Selenium)
        id: remove-nonacad
        env:
          TESTPASSWORD: ${{ secrets.TESTPASSWORD }}
          NACAD_REMOVE_EMAILS: ${{ env.NACAD_REMOVE_EMAILS }}
        run: |
          echo "$NACAD_REMOVE_EMAILS" > remove_targets.json
          python3 scripts/remove_member_from_listserv.py remove_targets.json "https://b7943cf2de68.ngrok-free.app/mailman/admin/testlist/members/remove" "$TESTPASSWORD" remove_results.json
          cat remove_results.json

      # Final Step: Update ServiceNow sc_task with results and close/annotate task where required
      - name: Update ServiceNow tasks with results
        env:
          SN_USER: ${{ secrets.SERVICECONNECT_USERNAME }}
          SN_PASS: ${{ secrets.SERVICECONNECT_PASSWORD }}
        run: |
          update_task() {
            local TASK="$1"; local NOTE="$2"; local RESULT="$3"
            # Always update work_notes
            curl -s -u "$SN_USER:$SN_PASS" \
              --request PATCH \
              --header "Content-Type: application/json" \
              --data "{\"work_notes\": \"$NOTE\"}" \
              "https://utsdevesm.service-now.com/api/now/table/sc_task?sysparm_query=number=${TASK}" > /dev/null
            # Do we want to close the ticket and set config item?
            if [[ ! "$RESULT" =~ ^error ]]; then
              curl -s -u "$SN_USER:$SN_PASS" \
                --request PATCH \
                --header "Content-Type: application/json" \
                --data '{"state":"3","cmdb_ci":{"display_value":"Listserv"}}' \
                "https://utsdevesm.service-now.com/api/now/table/sc_task?sysparm_query=number=${TASK}" > /dev/null
              echo "Closed and set Listserv CI for $TASK"
            else
              echo "Left $TASK open due to error: $RESULT"
            fi
          }

          # Read results from JSONs
          [ -f add_results.json ] && ADDLIST="$(cat add_results.json)" || ADDLIST="[]"
          [ -f remove_results.json ] && REMOVELIST="$(cat remove_results.json)" || REMOVELIST="[]"
          # Merge and process
          echo "$ADDLIST" | jq -c '.[]' | while read row; do
            TASK=$(echo "$row" | jq -r '.[0]')
            EMAIL=$(echo "$row" | jq -r '.[1]')
            RESULT=$(echo "$row" | jq -r '.[2]')
            update_task "$TASK" "Mailman add($EMAIL): $RESULT" "$RESULT"
          done
          echo "$REMOVELIST" | jq -c '.[]' | while read row; do
            TASK=$(echo "$row" | jq -r '.[0]')
            EMAIL=$(echo "$row" | jq -r '.[1]')
            RESULT=$(echo "$row" | jq -r '.[2]')
            update_task "$TASK" "Mailman remove($EMAIL): $RESULT" "$RESULT"
          done
